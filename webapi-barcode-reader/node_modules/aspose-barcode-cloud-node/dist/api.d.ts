/// <reference types="node" />
import { Configuration } from './Configuration';
import { HttpResponse } from './httpClient';
import { BarcodeResponseList, DiscUsage, FileVersions, FilesList, FilesUploadResult, ObjectExist, ResultImageInfo, StorageExist } from './models';
import { GetBarcodeGenerateRequest, GetBarcodeRecognizeRequest, PostBarcodeRecognizeFromUrlOrContentRequest, PostGenerateMultipleRequest, PutBarcodeGenerateFileRequest, PutBarcodeRecognizeFromBodyRequest, PutGenerateMultipleRequest, CopyFileRequest, DeleteFileRequest, DownloadFileRequest, MoveFileRequest, UploadFileRequest, CopyFolderRequest, CreateFolderRequest, DeleteFolderRequest, GetFilesListRequest, MoveFolderRequest, GetDiscUsageRequest, GetFileVersionsRequest, ObjectExistsRequest, StorageExistsRequest } from './models';
export * from './models';
export declare class BarcodeApi {
    protected defaultHeaders: any;
    protected _configuration: Configuration;
    private _client;
    constructor(configuration: Configuration);
    /**
     *
     * @summary Generate barcode.
     * @param request GetBarcodeGenerateRequest
     */
    getBarcodeGenerate(request: GetBarcodeGenerateRequest): Promise<{
        response: HttpResponse;
        body: Buffer;
    }>;
    /**
     *
     * @summary Recognize barcode from a file on server.
     * @param request GetBarcodeRecognizeRequest
     */
    getBarcodeRecognize(request: GetBarcodeRecognizeRequest): Promise<{
        response: HttpResponse;
        body: BarcodeResponseList;
    }>;
    /**
     *
     * @summary Recognize barcode from an url or from request body. Request body can contain raw data bytes of the image with content-type \"application/octet-stream\". An image can also be passed as a form field.
     * @param request PostBarcodeRecognizeFromUrlOrContentRequest
     */
    postBarcodeRecognizeFromUrlOrContent(request: PostBarcodeRecognizeFromUrlOrContentRequest): Promise<{
        response: HttpResponse;
        body: BarcodeResponseList;
    }>;
    /**
     *
     * @summary Generate multiple barcodes and return in response stream
     * @param request PostGenerateMultipleRequest
     */
    postGenerateMultiple(request: PostGenerateMultipleRequest): Promise<{
        response: HttpResponse;
        body: Buffer;
    }>;
    /**
     *
     * @summary Generate barcode and save on server (from query params or from file with json or xml content)
     * @param request PutBarcodeGenerateFileRequest
     */
    putBarcodeGenerateFile(request: PutBarcodeGenerateFileRequest): Promise<{
        response: HttpResponse;
        body: ResultImageInfo;
    }>;
    /**
     *
     * @summary Recognition of a barcode from file on server with parameters in body.
     * @param request PutBarcodeRecognizeFromBodyRequest
     */
    putBarcodeRecognizeFromBody(request: PutBarcodeRecognizeFromBodyRequest): Promise<{
        response: HttpResponse;
        body: BarcodeResponseList;
    }>;
    /**
     *
     * @summary Generate image with multiple barcodes and put new file on server
     * @param request PutGenerateMultipleRequest
     */
    putGenerateMultiple(request: PutGenerateMultipleRequest): Promise<{
        response: HttpResponse;
        body: ResultImageInfo;
    }>;
}
export declare class FileApi {
    protected defaultHeaders: any;
    protected _configuration: Configuration;
    private _client;
    constructor(configuration: Configuration);
    /**
     *
     * @summary Copy file
     * @param request CopyFileRequest
     */
    copyFile(request: CopyFileRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Delete file
     * @param request DeleteFileRequest
     */
    deleteFile(request: DeleteFileRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Download file
     * @param request DownloadFileRequest
     */
    downloadFile(request: DownloadFileRequest): Promise<{
        response: HttpResponse;
        body: Buffer;
    }>;
    /**
     *
     * @summary Move file
     * @param request MoveFileRequest
     */
    moveFile(request: MoveFileRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Upload file
     * @param request UploadFileRequest
     */
    uploadFile(request: UploadFileRequest): Promise<{
        response: HttpResponse;
        body: FilesUploadResult;
    }>;
}
export declare class FolderApi {
    protected defaultHeaders: any;
    protected _configuration: Configuration;
    private _client;
    constructor(configuration: Configuration);
    /**
     *
     * @summary Copy folder
     * @param request CopyFolderRequest
     */
    copyFolder(request: CopyFolderRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Create the folder
     * @param request CreateFolderRequest
     */
    createFolder(request: CreateFolderRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Delete folder
     * @param request DeleteFolderRequest
     */
    deleteFolder(request: DeleteFolderRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Get all files and folders within a folder
     * @param request GetFilesListRequest
     */
    getFilesList(request: GetFilesListRequest): Promise<{
        response: HttpResponse;
        body: FilesList;
    }>;
    /**
     *
     * @summary Move folder
     * @param request MoveFolderRequest
     */
    moveFolder(request: MoveFolderRequest): Promise<{
        response: HttpResponse;
        body?: any;
    }>;
}
export declare class StorageApi {
    protected defaultHeaders: any;
    protected _configuration: Configuration;
    private _client;
    constructor(configuration: Configuration);
    /**
     *
     * @summary Get disc usage
     * @param request GetDiscUsageRequest
     */
    getDiscUsage(request: GetDiscUsageRequest): Promise<{
        response: HttpResponse;
        body: DiscUsage;
    }>;
    /**
     *
     * @summary Get file versions
     * @param request GetFileVersionsRequest
     */
    getFileVersions(request: GetFileVersionsRequest): Promise<{
        response: HttpResponse;
        body: FileVersions;
    }>;
    /**
     *
     * @summary Check if file or folder exists
     * @param request ObjectExistsRequest
     */
    objectExists(request: ObjectExistsRequest): Promise<{
        response: HttpResponse;
        body: ObjectExist;
    }>;
    /**
     *
     * @summary Check if storage exists
     * @param request StorageExistsRequest
     */
    storageExists(request: StorageExistsRequest): Promise<{
        response: HttpResponse;
        body: StorageExist;
    }>;
}
